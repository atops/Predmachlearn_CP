detectCores()
library(parallel)
detectCores()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
testing_filename <- "~/Dropbox/Coursera/Predmachlearn_CP/pml-testing.csv"
testing <- read.csv(testing_filename)
prd <- predict(trfit, newdata=testing)
prd
pml_write_files = function(x){
f <- function(i, v) {
filename = paste0("problem_id_", i, ".txt")
write.table(v, file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
mapply(f, seq_along(x), x)
}
pml_write_files(prd)
trfit
varImp(trfit$finalModel)
library(caret)
varImp(trfit$finalModel)
library(caret)
library(ggbiplot)
library(dplyr)
library(tidyr)
library(magrittr)
library(GGally)
library(pls)
library(randomForest)
#library(rgl)
library(parallel)
library(doParallel)
# --- CONSTANTS ----
set.seed(1000)
training_filename <- "~/Dropbox/Coursera/Predmachlearn_CP/pml-training.csv"
testing_filename <- "~/Dropbox/Coursera/Predmachlearn_CP/pml-testing.csv"
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# EXPLORE THE DATA
training <- read.csv(training_filename)
testing <- read.csv(testing_filename)
cols <- ncol(training)
rows <- nrow(training)
nas <- sapply(training, function(x) sum(is.na(x)))
nulls_df <- data.frame(nulls=unique(nas),
count=sapply(unique(nas), function(x) sum(nas==x)))
# Select covariates with full range of data -------
trdf <- training %>%
dplyr::select(classe,
user_name,
gyros_belt_x,     accel_belt_x,     magnet_belt_x,
gyros_belt_y,     accel_belt_y,     magnet_belt_y,
gyros_belt_z,     accel_belt_z,     magnet_belt_z,
gyros_arm_x,      accel_arm_x,      magnet_arm_x,
gyros_arm_y,      accel_arm_y,      magnet_arm_y,
gyros_arm_z,      accel_arm_z,      magnet_arm_z,
gyros_dumbbell_x, accel_dumbbell_x, magnet_dumbbell_x,
gyros_dumbbell_y, accel_dumbbell_y, magnet_dumbbell_y,
gyros_dumbbell_z, accel_dumbbell_z, magnet_dumbbell_z,
gyros_forearm_x,  accel_forearm_x,  magnet_forearm_x,
gyros_forearm_y,  accel_forearm_y,  magnet_forearm_y,
gyros_forearm_z,  accel_forearm_z,  magnet_forearm_z,
total_accel_belt,
total_accel_arm,
total_accel_dumbbell,
total_accel_forearm,
roll_dumbbell,  roll_forearm,  roll_arm,
pitch_dumbbell, pitch_forearm, pitch_arm,
yaw_dumbbell,   yaw_forearm,   yaw_arm)
num_training_factors <- ncol(trdf)
?train
tc <- trainControl(method="repeatedcv",
number=10,
repeats=3,
classProbs=TRUE,
allowParallel=TRUE)
trfit <- train(classe ~ .,
data=trdf,
trControl=tc,
method="rf")
trfit$finalModel
varImp(trfit$finalModel)
fancypairs(trfit$finalModel)
trfit0
varImp(trfit0$finalModel)
heatmap(varImp(trfit0$finalModel))
class(varImp(trfit0$finalModel))
heatmap(as.matrix(varImp(trfit0$finalModel)))
heatmap(as.matrix(varImp(trfit0$finalModel)), Rowv=NA, Colv=NA)
options(scipen=10)
class(varImp(trfit0$finalModel))
varImp(trfit0$finalModel)
options(scipen=7)
varImp(trfit0$finalModel)
options(scipen=5)
varImp(trfit0$finalModel)
options(digits=4)
varImp(trfit0$finalModel)
varImp(trfit0$finalModel)*5
varImp(trfit0$finalModel)*1000
varImp(trfit0$finalModel)*10000
options(digits=0)
varImp(trfit0$finalModel)*10000
options(digits=2)
varImp(trfit0$finalModel)*10000
varImp(trfit0$finalModel)*100000
varImp(trfit0$finalModel)*1000000
varImp(trfit0$finalModel)*10000000
vi <- varImp(trfit0$finalModel)*10000000
str(vi)
summarize(vi, sum(A:E))
?summarize
??dplyr
mutate(vi, all=sum(A:E))
vi$all <- rowSums()
vi$all <- rowSums(vi)
vi
arrange(vi, desc(all))
ordered[vi$all]
order[vi$all]
order(vi$all)
ordered(vi$all)
vi[order(vi$all),]
library(pander)
pandoc.table(vi[order(vi$all),])
cm
pander(cm)
pandoc.table(cm)
install.packages("htmlTable")
library(htmlTable)
vi
htmlTable(vi)
htmlTable(txtRound(vi,2))
htmlTable(txtRound(vi,2), align = c("l", "r", "r", "r", "r", "r", "r"))
vi <- varImp(trfit0$finalModel)*10000000
vi$all <- rowSums(vi)
pandoc.table(vi[order(vi$all),])
htmlTable(txtRound(vi[order(vi$all),],2),
align = c("l", "r", "r", "r", "r", "r", "r"))
vi <- varImp(trfit0$finalModel)*10000000
vi$all <- rowSums(vi)
#pandoc.table(vi[order(vi$all),])
htmlTable(txtRound(vi[order(vi$all),],2),
align = c("l", "r", "r", "r", "r", "r", "r"))
kable(txtRound(vi[order(vi$all),],2),
align = c("l", "r", "r", "r", "r", "r", "r"))
library(knitr)
kable(txtRound(vi[order(vi$all),],2),
align = c("l", "r", "r", "r", "r", "r", "r"))
kable(txtRound(vi[order(vi$all),],2),
align = c("r", "r", "r", "r", "r", "r"))
order(vi$all)
order(-vi$all)
vi <- varImp(trfit0$finalModel)*10000000
vi$all <- rowSums(vi)
#pandoc.table(vi[order(vi$all),])
#htmlTable(txtRound(vi[order(vi$all),],2),
#          align = c("l", "r", "r", "r", "r", "r", "r"))
kable(txtRound(vi[-order(vi$all),],2),
align = c("r", "r", "r", "r", "r", "r"))
vi <- varImp(trfit0$finalModel)*10000000
vi$all <- rowSums(vi)
#pandoc.table(vi[order(vi$all),])
#htmlTable(txtRound(vi[order(vi$all),],2),
#          align = c("l", "r", "r", "r", "r", "r", "r"))
kable(txtRound(vi[order(-vi$all),],2),
align = c("r", "r", "r", "r", "r", "r"))
tc0 <- trainControl(method="repeatedcv",
number=10,
repeats=3,
classProbs=TRUE,
allowParallel=TRUE)
trfit0 <- train(classe ~.,
data=trdf[,-user_name],
trControl=tc0,
method="pls")
cm <- confusionMatrix(trfit0)
cm
heatmap(cm$table, Rowv=NA, Colv=NA)
tc0 <- trainControl(method="repeatedcv",
number=10,
repeats=3,
classProbs=TRUE,
allowParallel=TRUE)
trfit0 <- train(classe ~.,
data=select(trdf,-user_name),
trControl=tc0,
method="pls")
cm <- confusionMatrix(trfit0)
cm
heatmap(cm$table, Rowv=NA, Colv=NA)
kable(vi[order(-vi$all),]),
align = c("r", "r", "r", "r", "r", "r"))
kable(vi[order(-vi$all),],
align = c("r", "r", "r", "r", "r", "r"))
library(caret)
library(ggbiplot)
library(dplyr)
library(tidyr)
library(magrittr)
library(GGally)
library(knitr)
#library(pls)
#library(randomForest)
#library(rgl)
library(parallel)
library(doParallel)
# --- CONSTANTS ----
set.seed(1000)
training_filename <- "~/Dropbox/Coursera/Predmachlearn_CP/pml-training.csv"
testing_filename <- "~/Dropbox/Coursera/Predmachlearn_CP/pml-testing.csv"
cl <- makeCluster(detectCores())
registerDoParallel(cl)
# EXPLORE THE DATA
training <- read.csv(training_filename)
testing <- read.csv(testing_filename)
cols <- ncol(training)
rows <- nrow(training)
nas <- sapply(training, function(x) sum(is.na(x)))
nulls_df <- data.frame(nulls=unique(nas),
count=sapply(unique(nas), function(x) sum(nas==x)))
# Select covariates with full range of data -------
trdf <- training %>%
dplyr::select(classe,
user_name,
gyros_belt_x,     accel_belt_x,     magnet_belt_x,
gyros_belt_y,     accel_belt_y,     magnet_belt_y,
gyros_belt_z,     accel_belt_z,     magnet_belt_z,
gyros_arm_x,      accel_arm_x,      magnet_arm_x,
gyros_arm_y,      accel_arm_y,      magnet_arm_y,
gyros_arm_z,      accel_arm_z,      magnet_arm_z,
gyros_dumbbell_x, accel_dumbbell_x, magnet_dumbbell_x,
gyros_dumbbell_y, accel_dumbbell_y, magnet_dumbbell_y,
gyros_dumbbell_z, accel_dumbbell_z, magnet_dumbbell_z,
gyros_forearm_x,  accel_forearm_x,  magnet_forearm_x,
gyros_forearm_y,  accel_forearm_y,  magnet_forearm_y,
gyros_forearm_z,  accel_forearm_z,  magnet_forearm_z,
total_accel_belt,
total_accel_arm,
total_accel_dumbbell,
total_accel_forearm,
roll_dumbbell,  roll_forearm,  roll_arm,
pitch_dumbbell, pitch_forearm, pitch_arm,
yaw_dumbbell,   yaw_forearm,   yaw_arm)
num_training_factors <- ncol(trdf)
dim(training)
tim(trdf)
dim(trdf)
dim(nas)
nas
sum(nas==0)
sum(nas>0)
str(nulls_df)
training$skewness_roll_forearm
nas
training$max_picth_forearm
is.na(training$max_picth_forearm)
sum(is.na(training$max_picth_forearm))
nas
nrow(training) - sum(is.na(training$max_picth_forearm))
blanks <- sapply(training, function(x) sum(x==""))
dim(blanks)
blanks
blanks <- sapply(training, function(x) sum(x=="") | is.na(x))
blanks
sum(blanks)
blanks <- sapply(training, function(x) sum(x=="" | is.na(x)))
blanks
sum(blanks==0)
sum(blanks>0)
uniques(blanks)
unique(blanks)
prd <- predict(trfit, newdata=testing)
confusionMatrix(prd, reference=testing$classe)
prd
testing$classe
testing
c("r", "r", "r", "r", "r", "r")
rep("r", 6)
kable(vi[order(-vi$all),],
align = "r")
vi <- varImp(trfit0$finalModel)*10000000
vi$Sum <- rowSums(vi)
kable(vi[order(-vi$Sum),], align = "r", digits=2)
cm
cm$table
kable(cm$table)
cm$norm
cm$B
cm$text
kable(cm$table, digits=2)
cm2 <- confusionMatrix(prd, reference=training$classe)
prd <- predict(trfit, newdata=training)
confusionMatrix(prd, reference=training$classe)
cm2 <- confusionMatrix(prd, reference=training$classe)
cm2$positive
cm2$overall
print(cm2)
cm2$dots
cm2$byClass
kable(cm2$byClass)
kable(cm2$byClass, digits=2)
cm2$table
kable(cm2$table)
cm2$overall
t(cm2$overall)
cm <- confusionMatrix(trfit)
prd <- predict(trfit, newdata=training)
print(confusionMatrix(prd, reference=training$classe))
cp <- corplot(trdf)
cp$matrix
cp$plot
cp
corplot <- function(df) {
tr_nofactor <- dplyr::select(df, -c(classe, user_name))
cm <- cor(tr_nofactor)
heatmap(cm,
Rowv=NA, Colv=NA,
col=heat.colors(256),
scale="column",
margins=c(5,10),
main="Correlation Matrix")
}
cp <- corplot(trdf)
cp
corplot(trdf)
trfit
trfit$method
trfit$modelInfo
trfit$modelType
trfit$results
trfit$pred
trfit$bestTune
trfit$call
trfit$dots
trfit$control
trfit$finalModel
varImpPlot(trfit)
varImpPlot(trfit$finalModel)
plot.randomForest()
MDSplot(trfit$finalModel)
MDSplot(trfit)
MDSplot(trfit$pred)
class(trfit)
